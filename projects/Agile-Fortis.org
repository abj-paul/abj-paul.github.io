#+TITLE: Automating Cost Concerns of Fortis Redesigns
#+AUTHOR: Abhijit Paul
#+DATE: <2024-09-17 মঙ্গল>

** Update Optimization function to address cost concerns
I am trying to change codebase of Fortis - a research paper made by a PhD student in CMU. So I need to run that codebase for that, firstly.

We mainly encounter these issues after somehow resolving dependency issue.
| Error type                                    |
|-----------------------------------------------|
| Unresolved reference                          |
| Cannot infer a type for this parameter        |
| Not enough information to infer type variable |
| Overload resolution ambiguity                 |

And they occur from:
| Unresolved reference: X | Count |
|-------------------------+-------|
| Word                    |   306 |
| NFA                     |   108 |
| Alphabets               |    34 |
| Util                    |   108 |
| automaton               |   120 |
| variable S              |    70 |
| AutomatonBuilders       |    22 |
| TSTraversal             |   976 |

These classes are in ~net.automatalib~. It imports properly and we have also tried with v0.9.0-0.11.0. And most importantly, it does not show dependency error that it can't find a library. It just says:
- SimpleInvariantWeakener.kt:[27,36] Unresolved reference: Word
- NFAParallelComposition.kt:[61,31] Cannot infer a type for this parameter

*** Dependency not found!
These dependencies are not available in maven repository. So they must be available as jar files online. But I could not find any such jar files! And I checked .gitignore file of the [[https://github.com/cmu-soda/fortis-core][fortis-core]] repository and it excluded ~bin~ folder that includes the jar files.
[[file:~/abj-paul.github.io/data/fortis-depedency-issue.png]]

Possible reasons:
1. It is available somewhere online and I cannot find it, yet.
2. It is an internal file of cmu.soda
3. Remove those dependencies and see what happens: Many other issues are still there, sigh

*** common package not found!
As you can see in the list of packages, there is no ~common~ package. I checked last 30 commits randomly and did not find this folder in ANY of the commits! Its also not in .gitignore
[[file:~/abj-paul.github.io/data/common folder not found.png]]

Possible solutions:
1. My friend Radium found this [[https://github.com/cmu-soda/fortis-api.git][fortis-api]] repository. It has THE common package! It worked!
2. And here is [[https://github.com/SteveZhangBit/LTL-Learning][LTL Learning]] repository.
3. And here is [[https://github.com/LearnLib/automatalib?tab=readme-ov-file][automatalib-core]] repository. It did not work so we [[https://central.sonatype.com/artifact/net.automatalib/automata-core][found this]].
4. Also, automatalib-common may also be needed.


Their pom file is also incomplete! We had to manually add 1 dependency, but it still shows error. The eternally long list of errors can be found [[file:~/abj-paul.github.io/data/errors][here]]

** Use ChatGPT to generate costs
The goal is to generate costs and use that to generate graphs. Then we will inspect how effective those generations are. 

The input and prompts can be found in the dataset.

Now let us consutrct a dataset.
| Dataset   | Size      | Result                     | ChatGPT      |
|-----------+-----------+----------------------------+--------------|
| [[https://docs.google.com/document/d/1b-P9ouC9n9LPoleihJi20zfxn_1ZUm6D0snTOn9kCtM/edit?usp=sharing][Prompt_v1]] | 5 systems | Failed to find a solution. | [[https://chatgpt.com/share/66ea5931-daf0-8007-8250-eb7db4f186cd][chatGPT logs]] |
|           |           |                            |              |

We skip total_cost for now. It makes the process complex. Now we need to run Fortis to understand how good the cost assignments are.

** Eye gaze tracking
There are existing works that uses eye gaze tracking to assess the human comprehension complexity of a diagram.
[1] https://www.cs.kent.edu/~sdawoodi/pubs/icpc07-umlstudy.pdf
[2] Influence of diagram layout and scrolling on understandability of BPMN processes: an eye tracking experiment with BPMN diagrams

However, they are manual. We need to automate them. We can automate them via KNN - we will compare normalized vector embedding of new diagram with old ones' and assess complexity.

We will save the following [1]:
1. Fixation is the stabilization of eyes on an object of interest for a period of time.
2. Saccades are quick movements of the eyes that move interest from one location to the next (i.e., refixates).
3. Scanpath is a directed path formed by saccades between fixations.

Average Fixations on diagrams was used to approximate efforts needed to understand the diagram [1].
   
** Issues
- [ ] JSON issue
- [X] Minimized
- [X] Compile: Failed
- [X] Cost handling
- [ ] Good UML
- [ ] Estimate design comprehension ease
- [ ] Cost optimization algorithm
- [ ] Mutation test
- [ ] Design complexity
